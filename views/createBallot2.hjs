<!DOCTYPE html>
<html>

<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link rel="stylesheet" href='/stylesheets/style.css'>

<style>







</style>
</head>

<body>

  <div class="topnav">
    <a></a>
    <img src="https://prod.wp.cdn.aws.wfu.edu/sites/73/2017/04/WFU_Univ_H_White.jpg" height=102px width=300px></img>
    <a style="float:right">




    </a>
    <a style="float:right">
    <div class="dropdown">
      <button class="dropbtn">
        <i class="fa fa-caret-down"><img  src="https://www.materialui.co/materialIcons/social/person_white_48x48.png" ></img></i>
      </button>
      <div class="dropdown-content">
        <a href="/studentView">Student View</a>
        <a href="/logOut">Log Out</a>
      </div>
    </div>
    </a>
    <a style="float:right"></a>
  </div>
  <div id="iconDropDown"><div class="dropdown">
    <div id="myDropdown" class="dropdown-content">
      <a href="/studentView">Student View</a>
      <a href="/logOut">Log Out</a>
    </div></div>
  </div>

<div id="mySidenav" class="sidenav">
  <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
  <a href="/">Home</a>
  <a href="/createBallot">Create a Ballot</a>
  <a href="/viewBallot">View Ballots</a>
  <a href="/results">View Results</a>
</div>



<div id="main" class="main">

  <span style="font-size:30px;cursor:pointer" onclick="openNav()">&#9776; menu </span>
  <h2 style="text-align:center;"> Student Government - Election </h2>

    <!--<span id= "userData" style= "visibility: hidden">
       {{userList}};
    </span>-->

     <table align="center" cellpadding="20">

        <tr>
          <td align="left">Please enter the names of the candidates</td>
          <td align="center">
            <!--<INPUT id="candidateNameInput" type="text" name="txtChar" class="div1"/ > -->

            <form autocomplete="off" action="/users/addCandidate" method="post">
              <div class="autocomplete" style="width:300px;">
              <input id="myInput" type="text" name="name" value="">
            </div>
              <input type="submit" value="Submit">
            </form>
          </td>
        </tr>
        <tr>
          <td align="left"><b>Candidates</b></td>
          <td align="left">

            <div>
              <ul>
                {{#candidates}}   <!-- Iterate over the array in users variable -->
                <li>{{lastname}}<span class="close">&times;</span></li>  <!-- fields in the array entry -->
                {{/candidates}} <!-- end of loop -->
              </ul>
            </div>

          </td>
        </tr>

      </table>

    <button style = "float: right" onClick="next()">
      <a href="#"> View Preview &raquo; </a>
    </button>

</div>

<span id="userData" style="visibility:hidden">
          {{userList}}
</span>

<script>
function openNav() {
    document.getElementById("mySidenav").style.width = "250px";
    document.getElementById("main").style.marginLeft = "250px";


}

function closeNav() {
    document.getElementById("mySidenav").style.width = "0";
    document.getElementById("main").style.marginLeft= "30px";


}

/* When the user clicks on the button, toggle between hiding and showing the dropdown content */

function dropDownHideShow() {
    document.getElementById("myDropdown").classList.toggle("show");
}

// Close the dropdown menu if the user clicks outside of it
window.onclick = function(event) {
  if (!event.target.matches('.dropbtn')) {

    var dropdowns = document.getElementsByClassName("dropdown-content");
    var i;
    for (i = 0; i < dropdowns.length; i++) {
      var openDropdown = dropdowns[i];
      if (openDropdown.classList.contains('show')) {
        openDropdown.classList.remove('show');
      }
    }
  }
}

var closebtns = document.getElementsByClassName("close");
var i;

for (i = 0; i < closebtns.length; i++) {
  closebtns[i].addEventListener("click", function() {
    this.parentElement.style.display = 'none';
  });
}

// var xhr;

var users = [];

function decodeEntities(encodedString){
    var textArea = document.createElement('textarea');
    textArea.innerHTML = encodedString;
    return textArea.value;
}


window.onload = function () {

  //document.getElementById("userData").style.visibility = "hidden";
  var userData = decodeEntities(document.getElementById("userData").innerHTML);
  userData = JSON.parse(userData);

  for (var i =0; i < userData.length; i++) {
          users[i] = userData[i].lname + ", " + userData[i].fname;
  }

  autocomplete(document.getElementById("myInput"), users);
    // get userlist from server

  /*  xhr = new XMLHttpRequest();
    xhr.open('GET', "http://localhost:3000/users/getAllUserData", true);
    xhr.send();

    xhr.onreadystatechange = processRequest;
    */

}



// Code required for autocomplete functionality
function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
      });
}






function processRequest(e) {
  if (xhr.readyState == 4 && xhr.status == 200) {
    response = JSON.parse(xhr.responseText);
  }
}
</script>

</body>

</html>
